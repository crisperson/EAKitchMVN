package mhayes.interviews.ea.EAKitchMVN.models;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

// TODO: Auto-generated Javadoc
public class Card implements Comparable<Card> {

	/**
	 * The Enum Suit.
	 * Takes on values for CLUBS, HEARTS, SPADES, and DIAMONDS
	 */
	public enum Suit {
		
		/** The clubs. */
		CLUBS, 
 /** The hearts. */
 HEARTS, 
 /** The spades. */
 SPADES, 
 /** The diamonds. */
 DIAMONDS
	}

	/**
	 * The Enum Value.
	 * Takes on values for ACE->KING. Also associates a "value" with the card, as well as a string
	 * making it easier to read the value itself.
	 */
	public enum Value {

		ACE(14, "Ace"),
 TWO(2, "Two"), 
 THREE(3, "Three"), 
 FOUR(4, "Four"), 
 FIVE(5, "Five"), 
 SIX(6, "Six"), 
 SEVEN(7, "Seven"), 
 EIGHT(8, "Eight"), 
 NINE(9, "Nine"), 
 TEN(10, "Ten"), 
 JACK(11, "Jack"), 
 QUEEN(12, "Queen"), 
 KING(13, "King");

		/** The value of the current enum */
		private int value;
		
		/** The name of the current enum. */
		private String name;

		/**
		 * Instantiates a new value.
		 *
		 * @param v the value to instantiate the Value enum
		 * @param n the human readable name for the Value enum
		 */
		private Value(int v, String n) {
			this.value = v;
			this.name = n;
		}

		/**
		 * Gets the value.
		 *
		 * @return the value of the current enum; 2-14.
		 */
		public int getValue() {
			return value;
		}

		/**
		 * Gets the name of the current enum.
		 *
		 * @return the name in a human readable form
		 */
		public String getName() {
			return name;
		}
	}

	/** The private attribute Suit for the card; takes on a value from the enum Suit. */
	private Suit _suit;
	
	/** The private attribute Value for the card; takes on a value from the enum Value. */
	private Value _value;

	/**
	 * Instantiates a new card with a random instatiation.
	 */
	public Card() {
		makeRandomCard();
	}

	/**
	 * Instantiates a new card.
	 *
	 * @param s the suit for the new card
	 * @param v the value for the new card
	 */
	public Card(Suit s, Value v) {
		set_suit(s);
		set_value(v);
	}

	/**
	 * Make random card.
	 *
	 * @return the card generated by the random value (this class now represents this new random card)
	 */
	public Card makeRandomCard() {
		int r = (int) (Math.random() * (4));
		this._suit = Suit.values()[r];

		r = (int) (Math.random() * (13));
		this._value = Value.values()[r];

		return this;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 * 
	 * Generates the hashCode from the suit and value enums
	 * Uses the HashCodeBuilder class in apache commons lang
	 */
	public int hashCode() {
		return new HashCodeBuilder(17, 31).append(_suit).append(_value)
				.toHashCode();
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 * 
	 * Generates the equal property from the suit and value enums.
	 * Uses the EqualsBuilder class in apache commons lang
	 */
	public boolean equals(Object obj) {
		if (obj == null)
			return false;
		if (obj == this)
			return true;
		if (!(obj instanceof Card))
			return false;

		Card c = (Card) obj;
		return new EqualsBuilder().append(_suit, c._suit)
				.append(_value, c._value).isEquals();
	}

	/* Comparisons */

	/**
	 * Checks if a given card is greater than the current card. Note that this is independent of the suit.
	 *
	 * @param a the input Card 
	 * @return true, if the current class is greater than the input class, with respect to value
	 * 
	 */
	public boolean isGreater(Card a) {
		return this.get_value().getValue() > a.get_value().getValue();
	}

	/**
	 * Checks if the current card object is greater or equal to a given card object.
	 *
	 * @param a the input card object to be compared to the current card object
	 * @return true, if the current card object is greater or equal
	 */
	public boolean isGreaterOrEqual(Card a) {
		return this.get_value().getValue() >= a.get_value().getValue();
	}

	/**
	 * Checks if the current card object is equivalent in suit to a given suit.
	 *
	 * @param s the suit to be compared against
	 * @return true, if it has equivalent suit
	 */
	public boolean isEqualSuit(Suit s) {
		return this._suit.equals(s);
	}

	/**
	 * Checks if the current card object is equivalent in value to a given value
	 *
	 * @param v the value being compared against
	 * @return true, if is equal value
	 */
	public boolean isEqualValue(Value v) {
		return this._value.equals(v);
	}

	/* Getters and Setters */

	/**
	 * Gets the _value.
	 *
	 * @return the _value
	 */
	public Value get_value() {
		return _value;
	}

	/**
	 * Sets the _value.
	 *
	 * @param _value the new _value
	 */
	public void set_value(Value _value) {
		this._value = _value;
	}

	/**
	 * Gets the _suit.
	 *
	 * @return the _suit
	 */
	public Suit get_suit() {
		return _suit;
	}

	/**
	 * Sets the _suit.
	 *
	 * @param _suit the new _suit
	 */
	public void set_suit(Suit _suit) {
		this._suit = _suit;
	}

	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 * 
	 * Compares the current card object to a given card object based on value alone.
	 * Used in the CardComparator object to help sort within the PokerHand class
	 */
	public int compareTo(Card arg0) {

		return this.get_value().getValue() - arg0.get_value().getValue();
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 * 
	 * Returns a string human readable for the card
	 */
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();

		builder.append(_value + " of " + _suit + " | ");

		return builder.toString();
	}
}
